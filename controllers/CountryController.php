<?php

namespace app\controllers;

use hlt\GlobalFunction;
use Yii;
use app\models\Country;
use app\models\CountrySearch;
use yii\base\ExitException;
use yii\data\Pagination;
use yii\data\Sort;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * CountryController implements the CRUD actions for Country model.
 */
class CountryController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Country models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new CountrySearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $dataProvider->sort = new Sort(['defaultOrder' => ['createtime' => 'desc']]);
        $dataProvider->pagination = new Pagination(['defaultPageSize' => 5]);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Lists all Country models.
     * @return mixed
     */
    public function actionIndex3()
    {
        $model = new Country();
        if ($model->load(Yii::$app->request->post()) && $model->save())
        {
            $model = new Country(); //reset model
        }

        $searchModel = new CountrySearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $dataProvider->sort = new Sort(['defaultOrder' => ['createtime' => 'desc']]);
        $dataProvider->pagination = new Pagination(['defaultPageSize' => 5]);

        return $this->render('index3', [
            'model' => $model,
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'msg' => 'hello',
        ]);
    }

    /**
     * Lists all Country models.
     * @return mixed
     */
    public function actionIndex2()
    {
        $query = Country::find();

        $pagination = new Pagination([
            'defaultPageSize' => 5,
            'totalCount' => $query->count(),
        ]);

        $countries = $query->orderBy('name')
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        return $this->render('index2', [
            'countries' => $countries,
            'pagination' => $pagination,
        ]);
    }

    public function actionSms()
    {
        $gf = new GlobalFunction();
        $result = $gf->sendText('15210061902','²âÊÔÏÂÄÚÈÝ');
        var_dump($result);
    }

    /**
     * Displays a single Country model.
     * @param string $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Country model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Country();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->code]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing Country model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->code]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }


    /**
 * Population an existing Country model.
 * If deletion is successful, the population will be added one.
 * @param string $id
 * @return mixed
 * @throws \Exception
 */
    public function actionAuthor($id)
    {
        $model = $this->findModel($id);
        $model->population += 1;
        if (!$model->save()){
            echo json_encode($model->errors);
            die;
        }

        return $this->redirect(['index']);
    }

    /**
     * Population an existing Country model.
     * If deletion is successful, the population will be added one.
     * @param string $id
     * @return mixed
     * @throws \Exception
     */
    public function actionAuthorRemove($id)
    {
        $model = $this->findModel($id);
        $model->population -= 1;
        if (!$model->save()){
            echo json_encode($model->errors);
            die;
        }

        return $this->redirect(['index']);
    }

    /**
     * Deletes an existing Country model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Country model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return Country the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Country::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
